@page "/"

@rendermode InteractiveServer
@using System.ComponentModel.DataAnnotations
@using BlazorTodoApp.Services
@using BlazorTodoApp.Models
@inject TodoService TodoService

<PageTitle>Home</PageTitle>

<div class="py-10 px-7 md:px-10">
    <h2 class="text-white text-3xl text-center">Blazor Todo App</h2>
    <div class="mt-8 mx-auto flex items-center justify-center gap-7 text-white">
        <button @onclick="() => OnChangeSelected('A')"
            class="px-4 py-2 rounded-md border hover:scale-110 transition-all @(Selected == 'A' ? "bg-blue-500/50" : "bg-transparent")">
            All
        </button>
        <button @onclick="() => OnChangeSelected('N')"
            class="px-4 py-2 rounded-md border hover:scale-110 transition-all @(Selected == 'N' ? "bg-blue-500/50" : "bg-transparent")">
            Not Complete
        </button>
        <button @onclick="() => OnChangeSelected('C')"
            class="px-4 py-2 rounded-md border hover:scale-110 transition-all @(Selected == 'C' ? "bg-blue-500/50" : "bg-transparent")">
            Completed
        </button>
    </div>
    <div class="flex flex-col lg:flex-row justify-center items-center lg:items-start gap-x-7">
        <EditForm Model="newTodoItem" OnValidSubmit="HandleSubmit"
            class="lg:sticky lg:top-[7.4rem] mt-10 w-full md:w-[450px] bg-gray-400 rounded-md bg-clip-padding backdrop-filter backdrop-blur-sm bg-opacity-10 border border-gray-100 px-6 py-3 pb-6">
            <div class="flex flex-col gap-y-2 mb-3">
                <label for="title" class="text-white">Title:</label>
                <InputText id="title" @bind-Value="newTodoItem.Title" class="border py-1 px-3 rounded-lg" />
            </div>
            <div class="flex flex-col gap-y-2 mb-3">
                <label for="description" class="text-white">Description:</label>
                <InputTextArea id="description" @bind-Value="newTodoItem.Description"
                    class="border py-1 px-3 rounded-lg" />
            </div>
            <div class="flex flex-col gap-y-2 mb-3">
                <label for="dueDate" class="text-white">Due Date:</label>
                <InputDate id="dueDate" @bind-Value="newTodoItem.DueDate" class="border py-1 px-3 rounded-lg" />
            </div>
            <button type="submit" class="bg-blue-500 text-white rounded-md border px-4 py-2 mt-4">Submit</button>
        </EditForm>

        <div
            class="lg:sticky lg:top-[7.4rem] mt-10 max-h-[700px] lg:max-h-[1000px] overflow-y-auto w-full md:w-[530px]">
            <ul class=" w-full space-y-3 ">
                @foreach (var todo in TodoService.GetTodos(Selected))
                {
                    <TodoItemComponent Id="@todo.Id" Title="@todo.Title" Description="@todo.Description"
                        IsCompleted="@todo.IsCompleted" DueDate="@todo.DueDate" OnRemove="RemoveTodoItem"
                        OnMakeAsComplete="MaskAsCompleteTodoItem" OnUpdateTodo="UpdateTodo" />
                }
            </ul>
        </div>
    </div>
</div>

@code {
    private char Selected = 'A';
    private TodoItem newTodoItem = new TodoItem();

    private void HandleSubmit()
    {
        TodoService.AddTodo(newTodoItem);

        newTodoItem = new TodoItem();
    }

    private void RemoveTodoItem(int id)
    {
        TodoService.RemoveTodo(id);
        // Refresh the list by triggering a re-render
        StateHasChanged();
    }

    private void MaskAsCompleteTodoItem(TodoItem todo)
    {
        TodoService.MarkAsComplete(todo);
        StateHasChanged();
    }

    private void UpdateTodo(TodoItem todo)
    {
        TodoService.UpdateTodo(todo);
        StateHasChanged();
    }

    private void OnChangeSelected(char value)
    {
        Selected = value;
        StateHasChanged();
    }
}
